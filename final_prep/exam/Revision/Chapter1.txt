### Chapter 1: Introducing C#

1. What is the .NET framework, and how does it relate to .NET Standard and .NET Core?
    -> .NET is an open-source, cross-platform framework developed by MicroSoft. 
    The .NET framework is a platform that provides tools and libraries for developing Windows applications.
    .NET Standard is a set of APIs that all .NET platforms must implement,
    ensuring consistency across different implementations. .NET Core is a cross-platform,
    open-source implementation of .NET.

2. Explain the concepts of Common Intermediate Language (CIL) and Just-In-Time (JIT) compilation.
    -> CIL is an intermediate code generated by the C# compiler.
    JIT compilation occurs at runtime, where CIL is converted into native machine code,
    allowing it to run on the specific hardware.

3. What are assemblies in C#?
    -> Assemblies are the fundamental units of deployment and versioning in .NET. 
    They contain compiled code, metadata, and resources needed for an application. 
    Assemblies can be executables (with a .exe extension) or libraries (with a .dll extension).

4. Describe the characteristics of managed code and the role of garbage collection.
    -> Managed code runs in a managed environment with services like automatic memory management (garbage collection).
     Garbage collection cleans up unused objects, preventing memory leaks and enhancing application stability.

5. How does C# fit into the .NET ecosystem, and what types of applications can you write with C#?
    -> C# is a programming language designed for building applications on the .NET platform.
    It can be used to create a wide range of applications, including desktop, web, mobile,
    cloud-based, and more. C# is versatile and supports various application development scenarios.