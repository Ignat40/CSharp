## Chapter 11: Collections, Comparisons, and Conversions

1. Explain the use of collections in C# and define indexers.
    -> Collections in C# are essential components for managing
    and storing groups of related elements. They provide a flexible
    and efficient way to work with data structures. Key collection types include:
    lists, dictionaries, hastables... There are two types of collections. 
    1. Generic:
        ·List
        ·Dictionary
        ·Sorted List
        ·Stack
        ·HastTable 
        ·Queue
    2. Non-Generic: 
        ·ArrayList
        ·Stack 
        ·Queue

    -> Indexers: special kind of property that you can add to a class to provide array-like access. 



2. Discuss comparisons in C#, including type comparisons, boxing, and unboxing.
    -> Type Comparisons: determining what an object is, or what it inherits from

    -> Value Comparisons: must define what is meant by a comparison for a start, 
    and what operators such as > mean in the context of your classes.

    -> boxing: the process of convering from value type to reference type
    happens when by using the special word "boxing".

    -> unboxing: the process of converting from reference type to value type (explicit convertion)

    -> The "is" operator: check whether an object either is or can be converted into a given type.
    Tasts the "is-a" relationship. It's of boolen type. 

    -> The "as" operator: used to perform conversion between compatible reference types.   

3. How do you handle conversions in C#, and what are the different types of conversions?
    -> 

4. Operator overloading 
    -> 